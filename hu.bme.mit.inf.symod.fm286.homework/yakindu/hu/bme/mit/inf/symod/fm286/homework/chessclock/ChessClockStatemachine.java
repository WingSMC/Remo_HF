/** Generated by YAKINDU Statechart Tools code generator. */
package hu.bme.mit.inf.symod.fm286.homework.chessclock;

import hu.bme.mit.inf.symod.fm286.homework.ITimer;

public class ChessClockStatemachine implements IChessClockStatemachine {
	protected class SCIButtonsImpl implements SCIButtons {
	
		private boolean modeButton;
		
		
		public void raiseModeButton() {
			modeButton = true;
			runCycle();
		}
		
		private boolean startButton;
		
		
		public void raiseStartButton() {
			startButton = true;
			runCycle();
		}
		
		private boolean blackButton;
		
		
		public void raiseBlackButton() {
			blackButton = true;
			runCycle();
		}
		
		private boolean whiteButton;
		
		
		public void raiseWhiteButton() {
			whiteButton = true;
			runCycle();
		}
		
		protected void clearEvents() {
			modeButton = false;
			startButton = false;
			blackButton = false;
			whiteButton = false;
		}
	}
	
	
	protected class SCIBeeperImpl implements SCIBeeper {
	
		private SCIBeeperOperationCallback operationCallback;
		
		public void setSCIBeeperOperationCallback(
				SCIBeeperOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	
	protected class SCIDisplayImpl implements SCIDisplay {
	
		private String text;
		
		public String getText() {
			return text;
		}
		
		public void setText(String value) {
			this.text = value;
		}
		
		private long whiteDisplay;
		
		public long getWhiteDisplay() {
			return whiteDisplay;
		}
		
		public void setWhiteDisplay(long value) {
			this.whiteDisplay = value;
		}
		
		private long blackDisplay;
		
		public long getBlackDisplay() {
			return blackDisplay;
		}
		
		public void setBlackDisplay(long value) {
			this.blackDisplay = value;
		}
		
	}
	
	
	protected SCIButtonsImpl sCIButtons;
	
	protected SCIBeeperImpl sCIBeeper;
	
	protected SCIDisplayImpl sCIDisplay;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Play,
		main_region_Play_Play_WhiteStep,
		main_region_Play_Play_BlackStep,
		main_region_WhiteBegins,
		main_region_BlackBegins,
		main_region_White_Initial_Time,
		main_region_Black_Initial_Time,
		main_region_Increment_Time,
		main_region_Maximal_Time,
		main_region_Ready_to_play,
		main_region_Flag_Fallen,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[2];
	
	protected long getMinStartTime() {
		return minStartTime;
	}
	
	
	protected long getDefStartTime() {
		return defStartTime;
	}
	
	
	protected long getMaxStartTime() {
		return maxStartTime;
	}
	
	
	private long whiteInit;
	
	protected long getWhiteInit() {
		return whiteInit;
	}
	
	protected void setWhiteInit(long value) {
		this.whiteInit = value;
	}
	
	
	private long blackInit;
	
	protected long getBlackInit() {
		return blackInit;
	}
	
	protected void setBlackInit(long value) {
		this.blackInit = value;
	}
	
	
	protected long getMinIncrement() {
		return minIncrement;
	}
	
	
	private long incr;
	
	protected long getIncr() {
		return incr;
	}
	
	protected void setIncr(long value) {
		this.incr = value;
	}
	
	
	protected long getMaxIncrement() {
		return maxIncrement;
	}
	
	
	protected long getMaxTimeMin() {
		return maxTimeMin;
	}
	
	
	private long maxTime;
	
	protected long getMaxTime() {
		return maxTime;
	}
	
	protected void setMaxTime(long value) {
		this.maxTime = value;
	}
	
	
	protected long getMaxTimeMax() {
		return maxTimeMax;
	}
	
	
	private boolean starts;
	
	protected boolean getStarts() {
		return starts;
	}
	
	protected void setStarts(boolean value) {
		this.starts = value;
	}
	
	
	private long whiteTime;
	
	protected long getWhiteTime() {
		return whiteTime;
	}
	
	protected void setWhiteTime(long value) {
		this.whiteTime = value;
	}
	
	
	private long blackTime;
	
	protected long getBlackTime() {
		return blackTime;
	}
	
	protected void setBlackTime(long value) {
		this.blackTime = value;
	}
	
	
	public ChessClockStatemachine() {
		sCIButtons = new SCIButtonsImpl();
		sCIBeeper = new SCIBeeperImpl();
		sCIDisplay = new SCIDisplayImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCIBeeper.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIBeeper must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCIDisplay.setText("Chess Clock");
		
		sCIDisplay.setWhiteDisplay(-1);
		
		sCIDisplay.setBlackDisplay(-1);
		
		setWhiteInit(IChessClockStatemachine.defStartTime);
		
		setBlackInit(IChessClockStatemachine.defStartTime);
		
		setIncr(10);
		
		setMaxTime(1200);
		
		setStarts(true);
		
		setWhiteTime(whiteInit);
		
		setBlackTime(blackInit);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Play_Play_WhiteStep:
				main_region_Play_Play_WhiteStep_react(true);
				break;
			case main_region_Play_Play_BlackStep:
				main_region_Play_Play_BlackStep_react(true);
				break;
			case main_region_WhiteBegins:
				main_region_WhiteBegins_react(true);
				break;
			case main_region_BlackBegins:
				main_region_BlackBegins_react(true);
				break;
			case main_region_White_Initial_Time:
				main_region_White_Initial_Time_react(true);
				break;
			case main_region_Black_Initial_Time:
				main_region_Black_Initial_Time_react(true);
				break;
			case main_region_Increment_Time:
				main_region_Increment_Time_react(true);
				break;
			case main_region_Maximal_Time:
				main_region_Maximal_Time_react(true);
				break;
			case main_region_Ready_to_play:
				main_region_Ready_to_play_react(true);
				break;
			case main_region_Flag_Fallen:
				main_region_Flag_Fallen_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIButtons.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Play:
			return stateVector[0].ordinal() >= State.
					main_region_Play.ordinal()&& stateVector[0].ordinal() <= State.main_region_Play_Play_BlackStep.ordinal();
		case main_region_Play_Play_WhiteStep:
			return stateVector[0] == State.main_region_Play_Play_WhiteStep;
		case main_region_Play_Play_BlackStep:
			return stateVector[0] == State.main_region_Play_Play_BlackStep;
		case main_region_WhiteBegins:
			return stateVector[0] == State.main_region_WhiteBegins;
		case main_region_BlackBegins:
			return stateVector[0] == State.main_region_BlackBegins;
		case main_region_White_Initial_Time:
			return stateVector[0] == State.main_region_White_Initial_Time;
		case main_region_Black_Initial_Time:
			return stateVector[0] == State.main_region_Black_Initial_Time;
		case main_region_Increment_Time:
			return stateVector[0] == State.main_region_Increment_Time;
		case main_region_Maximal_Time:
			return stateVector[0] == State.main_region_Maximal_Time;
		case main_region_Ready_to_play:
			return stateVector[0] == State.main_region_Ready_to_play;
		case main_region_Flag_Fallen:
			return stateVector[0] == State.main_region_Flag_Fallen;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCIButtons getSCIButtons() {
		return sCIButtons;
	}
	
	public SCIBeeper getSCIBeeper() {
		return sCIBeeper;
	}
	
	public SCIDisplay getSCIDisplay() {
		return sCIDisplay;
	}
	
	private boolean check_main_region_Play_Play__choice_0_tr0_tr0() {
		return getStarts();
	}
	
	private boolean check_main_region_Play_Play__choice_1_tr1_tr1() {
		return getBlackTime()>getMaxTime();
	}
	
	private boolean check_main_region_Play_Play__choice_2_tr1_tr1() {
		return getWhiteTime()>getMaxTime();
	}
	
	private boolean check_main_region_Play_Play__choice_5_tr1_tr1() {
		return getBlackTime()<=5;
	}
	
	private boolean check_main_region_Play_Play__choice_6_tr1_tr1() {
		return getBlackTime()<=0;
	}
	
	private boolean check_main_region_Play_Play__choice_7_tr0_tr0() {
		return getWhiteTime()<=5;
	}
	
	private boolean check_main_region_Play_Play__choice_8_tr1_tr1() {
		return getWhiteTime()<=0;
	}
	
	private boolean check_main_region__choice_0_tr0_tr0() {
		return getStarts();
	}
	
	private boolean check_main_region__choice_2_tr0_tr0() {
		return getWhiteInit()<getMinStartTime();
	}
	
	private boolean check_main_region__choice_3_tr1_tr1() {
		return getWhiteInit()>getMaxStartTime();
	}
	
	private boolean check_main_region__choice_4_tr1_tr1() {
		return getBlackInit()<getMinStartTime();
	}
	
	private boolean check_main_region__choice_5_tr1_tr1() {
		return getBlackInit()>getMaxStartTime();
	}
	
	private boolean check_main_region__choice_8_tr1_tr1() {
		return getIncr()>getMaxIncrement();
	}
	
	private boolean check_main_region__choice_9_tr1_tr1() {
		return getIncr()<getMinIncrement();
	}
	
	private boolean check_main_region__choice_11_tr1_tr1() {
		return getMaxTime()<getMaxTimeMin();
	}
	
	private boolean check_main_region__choice_12_tr1_tr1() {
		return getMaxTime()>getMaxTimeMax();
	}
	
	private void effect_main_region_Play_tr1() {
		exitSequence_main_region_Play();
		enterSequence_main_region_Flag_Fallen_default();
		react();
	}
	
	private void effect_main_region_Play_Play__choice_0_tr0() {
		sCIDisplay.setWhiteDisplay(whiteTime);
		
		react_main_region_Play_Play__choice_4();
	}
	
	private void effect_main_region_Play_Play__choice_0_tr1() {
		sCIDisplay.setBlackDisplay(blackTime);
		
		react_main_region_Play_Play__choice_3();
	}
	
	private void effect_main_region_Play_Play__choice_1_tr1() {
		setBlackTime(maxTime);
		
		react_main_region_Play_Play__choice_4();
	}
	
	private void effect_main_region_Play_Play__choice_1_tr0() {
		react_main_region_Play_Play__choice_4();
	}
	
	private void effect_main_region_Play_Play__choice_2_tr1() {
		setWhiteTime(maxTime);
		
		react_main_region_Play_Play__choice_3();
	}
	
	private void effect_main_region_Play_Play__choice_2_tr0() {
		react_main_region_Play_Play__choice_3();
	}
	
	private void effect_main_region_Play_Play__choice_3_tr0() {
		sCIDisplay.setText("Black moves");
		
		sCIDisplay.setWhiteDisplay(whiteTime);
		
		enterSequence_main_region_Play_Play_BlackStep_default();
	}
	
	private void effect_main_region_Play_Play__choice_4_tr0() {
		sCIDisplay.setText("White moves");
		
		sCIDisplay.setBlackDisplay(blackTime);
		
		enterSequence_main_region_Play_Play_WhiteStep_default();
	}
	
	private void effect_main_region_Play_Play__choice_5_tr1() {
		sCIBeeper.operationCallback.beep();
		
		react_main_region_Play_Play__choice_6();
	}
	
	private void effect_main_region_Play_Play__choice_5_tr0() {
		enterSequence_main_region_Play_Play_BlackStep_default();
	}
	
	private void effect_main_region_Play_Play__choice_6_tr1() {
		sCIDisplay.setText("Black flag fallen");
		
		react_main_region_Play_Play__exit_Default();
	}
	
	private void effect_main_region_Play_Play__choice_6_tr0() {
		enterSequence_main_region_Play_Play_BlackStep_default();
	}
	
	private void effect_main_region_Play_Play__choice_7_tr0() {
		sCIBeeper.operationCallback.beep();
		
		react_main_region_Play_Play__choice_8();
	}
	
	private void effect_main_region_Play_Play__choice_7_tr1() {
		enterSequence_main_region_Play_Play_WhiteStep_default();
	}
	
	private void effect_main_region_Play_Play__choice_8_tr1() {
		sCIDisplay.setText("White flag fallen");
		
		react_main_region_Play_Play__exit_Default();
	}
	
	private void effect_main_region_Play_Play__choice_8_tr0() {
		enterSequence_main_region_Play_Play_WhiteStep_default();
	}
	
	private void effect_main_region__choice_0_tr0() {
		enterSequence_main_region_WhiteBegins_default();
	}
	
	private void effect_main_region__choice_0_tr1() {
		enterSequence_main_region_BlackBegins_default();
	}
	
	private void effect_main_region__choice_1_tr0() {
		sCIDisplay.setText("White initial time");
		
		enterSequence_main_region_White_Initial_Time_default();
	}
	
	private void effect_main_region__choice_2_tr0() {
		setWhiteInit(IChessClockStatemachine.minStartTime);
		
		react_main_region__choice_7();
	}
	
	private void effect_main_region__choice_2_tr1() {
		enterSequence_main_region_White_Initial_Time_default();
	}
	
	private void effect_main_region__choice_3_tr1() {
		setWhiteInit(IChessClockStatemachine.maxStartTime);
		
		react_main_region__choice_7();
	}
	
	private void effect_main_region__choice_3_tr0() {
		enterSequence_main_region_White_Initial_Time_default();
	}
	
	private void effect_main_region__choice_4_tr1() {
		setBlackInit(IChessClockStatemachine.minStartTime);
		
		react_main_region__choice_6();
	}
	
	private void effect_main_region__choice_4_tr0() {
		enterSequence_main_region_Black_Initial_Time_default();
	}
	
	private void effect_main_region__choice_5_tr1() {
		setBlackInit(IChessClockStatemachine.maxStartTime);
		
		react_main_region__choice_6();
	}
	
	private void effect_main_region__choice_5_tr0() {
		enterSequence_main_region_Black_Initial_Time_default();
	}
	
	private void effect_main_region__choice_6_tr0() {
		sCIBeeper.operationCallback.beep();
		
		enterSequence_main_region_Black_Initial_Time_default();
	}
	
	private void effect_main_region__choice_7_tr0() {
		sCIBeeper.operationCallback.beep();
		
		enterSequence_main_region_White_Initial_Time_default();
	}
	
	private void effect_main_region__choice_8_tr1() {
		setIncr(IChessClockStatemachine.maxIncrement);
		
		react_main_region__choice_10();
	}
	
	private void effect_main_region__choice_8_tr0() {
		enterSequence_main_region_Increment_Time_default();
	}
	
	private void effect_main_region__choice_9_tr1() {
		setIncr(IChessClockStatemachine.minIncrement);
		
		react_main_region__choice_10();
	}
	
	private void effect_main_region__choice_9_tr0() {
		enterSequence_main_region_Increment_Time_default();
	}
	
	private void effect_main_region__choice_10_tr0() {
		sCIBeeper.operationCallback.beep();
		
		enterSequence_main_region_Increment_Time_default();
	}
	
	private void effect_main_region__choice_11_tr1() {
		setMaxTime(IChessClockStatemachine.maxTimeMin);
		
		react_main_region__choice_13();
	}
	
	private void effect_main_region__choice_11_tr0() {
		enterSequence_main_region_Maximal_Time_default();
	}
	
	private void effect_main_region__choice_12_tr1() {
		setMaxTime(IChessClockStatemachine.maxTimeMax);
		
		react_main_region__choice_13();
	}
	
	private void effect_main_region__choice_12_tr0() {
		enterSequence_main_region_Maximal_Time_default();
	}
	
	private void effect_main_region__choice_13_tr0() {
		sCIBeeper.operationCallback.beep();
		
		enterSequence_main_region_Maximal_Time_default();
	}
	
	/* Entry action for state 'WhiteStep'. */
	private void entryAction_main_region_Play_Play_WhiteStep() {
		timer.setTimer(this, 0, (1 * 1000), true);
	}
	
	/* Entry action for state 'BlackStep'. */
	private void entryAction_main_region_Play_Play_BlackStep() {
		timer.setTimer(this, 1, (1 * 1000), true);
	}
	
	/* Entry action for state 'WhiteBegins'. */
	private void entryAction_main_region_WhiteBegins() {
		sCIDisplay.setText("White begins");
		
		setStarts(true);
	}
	
	/* Entry action for state 'BlackBegins'. */
	private void entryAction_main_region_BlackBegins() {
		sCIDisplay.setText("Black begins");
		
		setStarts(false);
	}
	
	/* Entry action for state 'White Initial Time'. */
	private void entryAction_main_region_White_Initial_Time() {
		sCIDisplay.setWhiteDisplay(whiteInit);
	}
	
	/* Entry action for state 'Black Initial Time'. */
	private void entryAction_main_region_Black_Initial_Time() {
		sCIDisplay.setBlackDisplay(blackInit);
	}
	
	/* Entry action for state 'Increment Time'. */
	private void entryAction_main_region_Increment_Time() {
		sCIDisplay.setWhiteDisplay(incr);
	}
	
	/* Entry action for state 'Maximal Time'. */
	private void entryAction_main_region_Maximal_Time() {
		sCIDisplay.setWhiteDisplay(maxTime);
	}
	
	/* Entry action for state 'Ready to play'. */
	private void entryAction_main_region_Ready_to_play() {
		sCIDisplay.setText("Ready to play");
		
		sCIDisplay.setWhiteDisplay(-1);
		
		sCIDisplay.setBlackDisplay(-1);
	}
	
	/* Exit action for state 'WhiteStep'. */
	private void exitAction_main_region_Play_Play_WhiteStep() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'BlackStep'. */
	private void exitAction_main_region_Play_Play_BlackStep() {
		timer.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Play */
	private void enterSequence_main_region_Play_default() {
		enterSequence_main_region_Play_Play_default();
	}
	
	/* 'default' enter sequence for state WhiteStep */
	private void enterSequence_main_region_Play_Play_WhiteStep_default() {
		entryAction_main_region_Play_Play_WhiteStep();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Play_Play_WhiteStep;
	}
	
	/* 'default' enter sequence for state BlackStep */
	private void enterSequence_main_region_Play_Play_BlackStep_default() {
		entryAction_main_region_Play_Play_BlackStep();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Play_Play_BlackStep;
	}
	
	/* 'default' enter sequence for state WhiteBegins */
	private void enterSequence_main_region_WhiteBegins_default() {
		entryAction_main_region_WhiteBegins();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_WhiteBegins;
	}
	
	/* 'default' enter sequence for state BlackBegins */
	private void enterSequence_main_region_BlackBegins_default() {
		entryAction_main_region_BlackBegins();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_BlackBegins;
	}
	
	/* 'default' enter sequence for state White Initial Time */
	private void enterSequence_main_region_White_Initial_Time_default() {
		entryAction_main_region_White_Initial_Time();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_White_Initial_Time;
	}
	
	/* 'default' enter sequence for state Black Initial Time */
	private void enterSequence_main_region_Black_Initial_Time_default() {
		entryAction_main_region_Black_Initial_Time();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Black_Initial_Time;
	}
	
	/* 'default' enter sequence for state Increment Time */
	private void enterSequence_main_region_Increment_Time_default() {
		entryAction_main_region_Increment_Time();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Increment_Time;
	}
	
	/* 'default' enter sequence for state Maximal Time */
	private void enterSequence_main_region_Maximal_Time_default() {
		entryAction_main_region_Maximal_Time();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Maximal_Time;
	}
	
	/* 'default' enter sequence for state Ready to play */
	private void enterSequence_main_region_Ready_to_play_default() {
		entryAction_main_region_Ready_to_play();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Ready_to_play;
	}
	
	/* 'default' enter sequence for state Flag Fallen */
	private void enterSequence_main_region_Flag_Fallen_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Flag_Fallen;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Play */
	private void enterSequence_main_region_Play_Play_default() {
		react_main_region_Play_Play__entry_Default();
	}
	
	/* Default exit sequence for state Play */
	private void exitSequence_main_region_Play() {
		exitSequence_main_region_Play_Play();
	}
	
	/* Default exit sequence for state WhiteStep */
	private void exitSequence_main_region_Play_Play_WhiteStep() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Play_Play_WhiteStep();
	}
	
	/* Default exit sequence for state BlackStep */
	private void exitSequence_main_region_Play_Play_BlackStep() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Play_Play_BlackStep();
	}
	
	/* Default exit sequence for state WhiteBegins */
	private void exitSequence_main_region_WhiteBegins() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state BlackBegins */
	private void exitSequence_main_region_BlackBegins() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state White Initial Time */
	private void exitSequence_main_region_White_Initial_Time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Black Initial Time */
	private void exitSequence_main_region_Black_Initial_Time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Increment Time */
	private void exitSequence_main_region_Increment_Time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Maximal Time */
	private void exitSequence_main_region_Maximal_Time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Ready to play */
	private void exitSequence_main_region_Ready_to_play() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Flag Fallen */
	private void exitSequence_main_region_Flag_Fallen() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Play_Play_WhiteStep:
			exitSequence_main_region_Play_Play_WhiteStep();
			break;
		case main_region_Play_Play_BlackStep:
			exitSequence_main_region_Play_Play_BlackStep();
			break;
		case main_region_WhiteBegins:
			exitSequence_main_region_WhiteBegins();
			break;
		case main_region_BlackBegins:
			exitSequence_main_region_BlackBegins();
			break;
		case main_region_White_Initial_Time:
			exitSequence_main_region_White_Initial_Time();
			break;
		case main_region_Black_Initial_Time:
			exitSequence_main_region_Black_Initial_Time();
			break;
		case main_region_Increment_Time:
			exitSequence_main_region_Increment_Time();
			break;
		case main_region_Maximal_Time:
			exitSequence_main_region_Maximal_Time();
			break;
		case main_region_Ready_to_play:
			exitSequence_main_region_Ready_to_play();
			break;
		case main_region_Flag_Fallen:
			exitSequence_main_region_Flag_Fallen();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Play */
	private void exitSequence_main_region_Play_Play() {
		switch (stateVector[0]) {
		case main_region_Play_Play_WhiteStep:
			exitSequence_main_region_Play_Play_WhiteStep();
			break;
		case main_region_Play_Play_BlackStep:
			exitSequence_main_region_Play_Play_BlackStep();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Play_Play__choice_0() {
		if (check_main_region_Play_Play__choice_0_tr0_tr0()) {
			effect_main_region_Play_Play__choice_0_tr0();
		} else {
			effect_main_region_Play_Play__choice_0_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Play_Play__choice_1() {
		if (check_main_region_Play_Play__choice_1_tr1_tr1()) {
			effect_main_region_Play_Play__choice_1_tr1();
		} else {
			effect_main_region_Play_Play__choice_1_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Play_Play__choice_2() {
		if (check_main_region_Play_Play__choice_2_tr1_tr1()) {
			effect_main_region_Play_Play__choice_2_tr1();
		} else {
			effect_main_region_Play_Play__choice_2_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Play_Play__choice_3() {
		effect_main_region_Play_Play__choice_3_tr0();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Play_Play__choice_4() {
		effect_main_region_Play_Play__choice_4_tr0();
	}
	
	/* The reactions of state null. */
	private void react_main_region_Play_Play__choice_5() {
		if (check_main_region_Play_Play__choice_5_tr1_tr1()) {
			effect_main_region_Play_Play__choice_5_tr1();
		} else {
			effect_main_region_Play_Play__choice_5_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Play_Play__choice_6() {
		if (check_main_region_Play_Play__choice_6_tr1_tr1()) {
			effect_main_region_Play_Play__choice_6_tr1();
		} else {
			effect_main_region_Play_Play__choice_6_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Play_Play__choice_7() {
		if (check_main_region_Play_Play__choice_7_tr0_tr0()) {
			effect_main_region_Play_Play__choice_7_tr0();
		} else {
			effect_main_region_Play_Play__choice_7_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Play_Play__choice_8() {
		if (check_main_region_Play_Play__choice_8_tr1_tr1()) {
			effect_main_region_Play_Play__choice_8_tr1();
		} else {
			effect_main_region_Play_Play__choice_8_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		if (check_main_region__choice_0_tr0_tr0()) {
			effect_main_region__choice_0_tr0();
		} else {
			effect_main_region__choice_0_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_1() {
		effect_main_region__choice_1_tr0();
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_2() {
		if (check_main_region__choice_2_tr0_tr0()) {
			effect_main_region__choice_2_tr0();
		} else {
			effect_main_region__choice_2_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_3() {
		if (check_main_region__choice_3_tr1_tr1()) {
			effect_main_region__choice_3_tr1();
		} else {
			effect_main_region__choice_3_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_4() {
		if (check_main_region__choice_4_tr1_tr1()) {
			effect_main_region__choice_4_tr1();
		} else {
			effect_main_region__choice_4_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_5() {
		if (check_main_region__choice_5_tr1_tr1()) {
			effect_main_region__choice_5_tr1();
		} else {
			effect_main_region__choice_5_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_6() {
		effect_main_region__choice_6_tr0();
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_7() {
		effect_main_region__choice_7_tr0();
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_8() {
		if (check_main_region__choice_8_tr1_tr1()) {
			effect_main_region__choice_8_tr1();
		} else {
			effect_main_region__choice_8_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_9() {
		if (check_main_region__choice_9_tr1_tr1()) {
			effect_main_region__choice_9_tr1();
		} else {
			effect_main_region__choice_9_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_10() {
		effect_main_region__choice_10_tr0();
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_11() {
		if (check_main_region__choice_11_tr1_tr1()) {
			effect_main_region__choice_11_tr1();
		} else {
			effect_main_region__choice_11_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_12() {
		if (check_main_region__choice_12_tr1_tr1()) {
			effect_main_region__choice_12_tr1();
		} else {
			effect_main_region__choice_12_tr0();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_13() {
		effect_main_region__choice_13_tr0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Ready_to_play_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Play_Play__entry_Default() {
		setWhiteTime(whiteInit);
		
		setBlackTime(blackInit);
		
		react_main_region_Play_Play__choice_0();
	}
	
	/* The reactions of exit default. */
	private void react_main_region_Play_Play__exit_Default() {
		effect_main_region_Play_tr1();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Play_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.startButton) {
				exitSequence_main_region_Play();
				enterSequence_main_region_Ready_to_play_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Play_Play_WhiteStep_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.whiteButton) {
				exitSequence_main_region_Play_Play_WhiteStep();
				setWhiteTime(getWhiteTime() + incr);
				
				sCIBeeper.operationCallback.beep();
				
				react_main_region_Play_Play__choice_2();
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Play_Play_WhiteStep();
					setWhiteTime(getWhiteTime() - 1);
					
					sCIDisplay.setWhiteDisplay(whiteTime);
					
					react_main_region_Play_Play__choice_7();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Play_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Play_Play_BlackStep_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_main_region_Play_Play_BlackStep();
				setBlackTime(getBlackTime() + incr);
				
				sCIBeeper.operationCallback.beep();
				
				react_main_region_Play_Play__choice_1();
			} else {
				if (timeEvents[1]) {
					exitSequence_main_region_Play_Play_BlackStep();
					setBlackTime(getBlackTime() - 1);
					
					sCIDisplay.setBlackDisplay(blackTime);
					
					react_main_region_Play_Play__choice_5();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Play_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_WhiteBegins_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_main_region_WhiteBegins();
				enterSequence_main_region_BlackBegins_default();
				react();
			} else {
				if (sCIButtons.modeButton) {
					exitSequence_main_region_WhiteBegins();
					react_main_region__choice_1();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_BlackBegins_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.whiteButton) {
				exitSequence_main_region_BlackBegins();
				enterSequence_main_region_WhiteBegins_default();
				react();
			} else {
				if (sCIButtons.modeButton) {
					exitSequence_main_region_BlackBegins();
					react_main_region__choice_1();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_White_Initial_Time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_main_region_White_Initial_Time();
				setWhiteInit(getWhiteInit() - 10);
				
				react_main_region__choice_2();
			} else {
				if (sCIButtons.whiteButton) {
					exitSequence_main_region_White_Initial_Time();
					setWhiteInit(getWhiteInit() + 10);
					
					react_main_region__choice_3();
				} else {
					if (sCIButtons.modeButton) {
						exitSequence_main_region_White_Initial_Time();
						sCIDisplay.setWhiteDisplay(-1);
						
						sCIDisplay.setText("Black initial time");
						
						enterSequence_main_region_Black_Initial_Time_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Black_Initial_Time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_main_region_Black_Initial_Time();
				setBlackInit(getBlackInit() - 10);
				
				react_main_region__choice_4();
			} else {
				if (sCIButtons.whiteButton) {
					exitSequence_main_region_Black_Initial_Time();
					setBlackInit(getBlackInit() + 10);
					
					react_main_region__choice_5();
				} else {
					if (sCIButtons.modeButton) {
						exitSequence_main_region_Black_Initial_Time();
						sCIDisplay.setBlackDisplay(-1);
						
						sCIDisplay.setText("Increment time");
						
						enterSequence_main_region_Increment_Time_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Increment_Time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_main_region_Increment_Time();
				setIncr(getIncr() - 5);
				
				react_main_region__choice_9();
			} else {
				if (sCIButtons.whiteButton) {
					exitSequence_main_region_Increment_Time();
					setIncr(getIncr() + 5);
					
					react_main_region__choice_8();
				} else {
					if (sCIButtons.modeButton) {
						exitSequence_main_region_Increment_Time();
						sCIDisplay.setText("Maximal time");
						
						enterSequence_main_region_Maximal_Time_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Maximal_Time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_main_region_Maximal_Time();
				setMaxTime(getMaxTime() - 30);
				
				react_main_region__choice_11();
			} else {
				if (sCIButtons.whiteButton) {
					exitSequence_main_region_Maximal_Time();
					setMaxTime(getMaxTime() + 30);
					
					react_main_region__choice_12();
				} else {
					if (sCIButtons.modeButton) {
						exitSequence_main_region_Maximal_Time();
						enterSequence_main_region_Ready_to_play_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_to_play_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.modeButton) {
				exitSequence_main_region_Ready_to_play();
				sCIDisplay.setBlackDisplay(-1);
				
				sCIDisplay.setWhiteDisplay(-1);
				
				react_main_region__choice_0();
			} else {
				if (sCIButtons.startButton) {
					exitSequence_main_region_Ready_to_play();
					enterSequence_main_region_Play_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Flag_Fallen_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.startButton) {
				exitSequence_main_region_Flag_Fallen();
				enterSequence_main_region_Ready_to_play_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
