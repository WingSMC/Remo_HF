/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef SYSTEM_H_
#define SYSTEM_H_

#include "..\src\sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'system'.
*/

#ifndef SYSTEM_EVENTQUEUE_BUFFERSIZE
#define SYSTEM_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */

#define SYSTEM_STATE_COUNT 11

/*! Define dimension of the state configuration vector for orthogonal states. */
#define SYSTEM_MAX_ORTHOGONAL_STATES 1

/*! Define maximum number of time events that can be active at once */
#define SYSTEM_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_SYSTEM_RDEFAULT_DEFAULT_WORK_ROUTINE 0
#define SCVI_SYSTEM_RDEFAULT_DEFAULT_WORK_ROUTINE_R1_MEASURE 0
#define SCVI_SYSTEM_RDEFAULT_DEFAULT_WORK_ROUTINE_R1_SPRINKLE 0
#define SCVI_SYSTEM_RDEFAULT_INIT 0
#define SCVI_SYSTEM_RDEFAULT_MENU 0
#define SCVI_SYSTEM_RDEFAULT_SOIL_MOISTURE 0
#define SCVI_SYSTEM_RDEFAULT_TEMPERATURE 0
#define SCVI_SYSTEM_RDEFAULT_HUMIDITY 0
#define SCVI_SYSTEM_RDEFAULT_AIR_PRESSURE 0
#define SCVI_SYSTEM_RDEFAULT_RAIN 0
#define SCVI_SYSTEM_RDEFAULT_USB 0


/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	system_invalid_event = SC_INVALID_EVENT_VALUE,
	systemInternal_InitFinished,
	systemInternal_Raining,
	systemInternal_ConditionsMet
} system_event_name;

/*
 * Struct that represents a single event.
 */
typedef struct {
	system_event_name name;
} system_internal_event;

/*
 * Queue that holds the raised events.
 */
typedef struct system_eventqueue_s {
	system_internal_event events[SYSTEM_EVENTQUEUE_BUFFERSIZE];
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} system_eventqueue;
/*! Enumeration of all states */ 
typedef enum
{
	System_last_state,
	System_rDefault_Default_Work_Routine,
	System_rDefault_Default_Work_Routine_r1_Measure,
	System_rDefault_Default_Work_Routine_r1_Sprinkle,
	System_rDefault_Init,
	System_rDefault_Menu,
	System_rDefault_Soil_Moisture,
	System_rDefault_Temperature,
	System_rDefault_Humidity,
	System_rDefault_Air_Pressure,
	System_rDefault_Rain,
	System_rDefault_USB
} SystemStates;



/*! Type definition of the data structure for the SystemIfaceScreen interface scope. */
typedef struct
{
	sc_string text;
} SystemIfaceScreen;



/*! Type definition of the data structure for the SystemIfaceButtons interface scope. */
typedef struct
{
	sc_boolean matrix0_raised;
	sc_boolean matrix1_raised;
	sc_boolean matrix2_raised;
	sc_boolean matrix3_raised;
	sc_boolean matrix4_raised;
	sc_boolean matrix5_raised;
	sc_boolean matrix6_raised;
	sc_boolean matrix7_raised;
	sc_boolean matrix8_raised;
	sc_boolean matrix9_raised;
	sc_boolean matrixStar_raised;
	sc_boolean matrixHash_raised;
} SystemIfaceButtons;



/*! Type definition of the data structure for the SystemInternal interface scope. */
typedef struct
{
	sc_boolean InitFinished_raised;
	sc_boolean Raining_raised;
	sc_boolean ConditionsMet_raised;
	sc_integer targetSoilMoisture;
	sc_integer targetTemperature;
	sc_integer targetHumidity;
	sc_integer targetAirPressure;
	sc_boolean bRain;
	sc_integer soilMoisture;
	sc_integer temperature;
	sc_integer humidity;
	sc_integer airPressure;
	sc_boolean rain;
	sc_boolean sprinkleOn;
} SystemInternal;



/*! Type definition of the data structure for the SystemTimeEvents interface scope. */
typedef struct
{
	sc_boolean system_rDefault_Default_Work_Routine_r1_Measure_tev0_raised;
} SystemTimeEvents;




/*! 
 * Type definition of the data structure for the System state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	SystemStates stateConfVector[SYSTEM_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	SystemIfaceScreen ifaceScreen;
	SystemIfaceButtons ifaceButtons;
	SystemInternal internal;
	SystemTimeEvents timeEvents;
	system_eventqueue internal_event_queue;
} System;



/*! Initializes the System state machine data structures. Must be called before first usage.*/
extern void system_init(System* handle);

/*! Activates the state machine */
extern void system_enter(System* handle);

/*! Deactivates the state machine */
extern void system_exit(System* handle);

/*! Performs a 'run to completion' step. */
extern void system_runCycle(System* handle);

/*! Raises a time event. */
extern void system_raiseTimeEvent(System* handle, sc_eventid evid);

/*! Gets the value of the variable 'text' that is defined in the interface scope 'Screen'. */ 
extern sc_string systemIfaceScreen_get_text(const System* handle);
/*! Sets the value of the variable 'text' that is defined in the interface scope 'Screen'. */ 
extern void systemIfaceScreen_set_text(System* handle, sc_string value);
/*! Raises the in event 'matrix0' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrix0(System* handle);

/*! Raises the in event 'matrix1' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrix1(System* handle);

/*! Raises the in event 'matrix2' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrix2(System* handle);

/*! Raises the in event 'matrix3' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrix3(System* handle);

/*! Raises the in event 'matrix4' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrix4(System* handle);

/*! Raises the in event 'matrix5' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrix5(System* handle);

/*! Raises the in event 'matrix6' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrix6(System* handle);

/*! Raises the in event 'matrix7' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrix7(System* handle);

/*! Raises the in event 'matrix8' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrix8(System* handle);

/*! Raises the in event 'matrix9' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrix9(System* handle);

/*! Raises the in event 'matrixStar' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrixStar(System* handle);

/*! Raises the in event 'matrixHash' that is defined in the interface scope 'Buttons'. */ 
extern void systemIfaceButtons_raise_matrixHash(System* handle);


/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean system_isActive(const System* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean system_isFinal(const System* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean system_isStateActive(const System* handle, SystemStates state);


#ifdef __cplusplus
}
#endif 

#endif /* SYSTEM_H_ */
